{"version":3,"sources":["constants/api.js","components/upload/Upload.js"],"names":["API","upload","Upload","useState","selectedFile","setSelectedFile","loading","setLoading","DATA","msgChooseFile","message","setMessage","className","msgUpload","Form","Row","Col","File","id","name","onChange","event","target","files","Button","variant","type","onClick","formData","FormData","append","axios","post","then","res","data","statusCode","catch","e","msgError","btnUpload","Spinner","animation","role","msgUploading","Table","striped","bordered","hover","size","labelFileName","labelFileType","labelLastModified","lastModifiedDate","toDateString","Alert"],"mappings":"gOAKaA,G,MAAM,CACjBC,OAAO,GAAD,OALC,yBAKD,wB,QCwGOC,UAvGA,WAAM,MAEqBC,mBAAS,MAF9B,mBAEZC,EAFY,KAEEC,EAFF,OAGWF,oBAAS,GAHpB,mBAGZG,EAHY,KAGHC,EAHG,OAIWJ,mBAASK,IAAKC,eAJzB,mBAIZC,EAJY,KAIHC,EAJG,KAiFnB,OACE,qCACE,oBAAIC,UAAU,+BAAd,SAA8CJ,IAAKK,YACnD,uBACA,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAACF,EAAA,EAAKG,KAAN,CAAWC,GAAG,SAASC,KAAK,SAASC,SAjF1B,SAACC,GAEpBhB,EAAgBgB,EAAMC,OAAOC,MAAM,SAiF7B,cAACP,EAAA,EAAD,UACE,cAACQ,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,SAASC,QA9E7B,WACnB,GAAKvB,EAAL,CAGAG,GAAW,GAEX,IAAMqB,EAAW,IAAIC,SAGrBD,EAASE,OAAO,OAAQ1B,EAAcA,EAAae,MAOnDY,IACGC,KAAKhC,EAAIC,OAAQ2B,GACjBK,MAAK,SAACC,GACDA,GAAOA,EAAIC,MAAgC,MAAxBD,EAAIC,KAAKC,aAC9B7B,GAAW,GACXF,EAAgB,MAChBM,EAAWuB,EAAIC,KAAKA,UAGvBE,OAAM,SAACC,GACN/B,GAAW,GACXF,EAAgB,MAChBM,EAAWH,IAAK+B,eAkDZ,SACG/B,IAAKgC,mBAKd,uBAjDElC,EAEA,qBAAKM,UAAU,cAAf,SACE,cAAC6B,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,SAAjC,SACE,sBAAM/B,UAAU,UAAhB,SAA2BJ,IAAKoC,mBAKpCxC,EAEA,eAACyC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,KAAK,KAAnC,UACE,gCACE,+BACE,6BAAKzC,IAAK0C,gBACV,6BAAK1C,IAAK2C,gBACV,6BAAK3C,IAAK4C,yBAGd,gCACE,+BACE,6BAAKhD,EAAae,OAClB,6BAAKf,EAAasB,OAClB,6BAAKtB,EAAaiD,iBAAiBC,yBAMpC,cAACC,EAAA,EAAD,CAAO9B,QAAS,UAAhB,SAA4Bf","file":"static/js/5.0f995e02.chunk.js","sourcesContent":["export const URL = {\r\n  local: \"http://localhost:8080/\",\r\n  server: \"https://pankaj-xor.github.io/\",\r\n};\r\n\r\nexport const API = {\r\n  upload: `${URL.local}api/patient/upload`,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Button, Form, Alert, Spinner, Row, Col, Table } from \"react-bootstrap\";\r\nimport \"./Upload.css\";\r\nimport { API } from \"../../constants/api\";\r\nimport { DATA } from \"../../constants/en\";\r\n\r\nconst Upload = () => {\r\n  // Initially, no file is selected\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [message, setMessage] = useState(DATA.msgChooseFile);\r\n\r\n  // On file select (from the pop up)\r\n  const onFileChange = (event) => {\r\n    // Update the state\r\n    setSelectedFile(event.target.files[0]);\r\n  };\r\n\r\n  // On file upload (click the upload button)\r\n  const onFileUpload = () => {\r\n    if (!selectedFile) {\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    // Create an object of formData\r\n    const formData = new FormData();\r\n\r\n    // Update the formData object\r\n    formData.append(\"file\", selectedFile, selectedFile.name);\r\n\r\n    // Details of the uploaded file\r\n    // console.log(selectedFile);\r\n\r\n    // Request made to the backend api\r\n    // Send formData object\r\n    axios\r\n      .post(API.upload, formData)\r\n      .then((res) => {\r\n        if (res && res.data && res.data.statusCode === 200) {\r\n          setLoading(false);\r\n          setSelectedFile(null);\r\n          setMessage(res.data.data);\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        setLoading(false);\r\n        setSelectedFile(null);\r\n        setMessage(DATA.msgError);\r\n      });\r\n  };\r\n\r\n  // File content to be displayed after\r\n  // file upload is complete\r\n  const fileData = () => {\r\n    if (loading) {\r\n      return (\r\n        <div className=\"text-center\">\r\n          <Spinner animation=\"border\" role=\"status\">\r\n            <span className=\"sr-only\">{DATA.msgUploading}</span>\r\n          </Spinner>\r\n        </div>\r\n      );\r\n    }\r\n    if (selectedFile) {\r\n      return (\r\n        <Table striped bordered hover size=\"sm\">\r\n          <thead>\r\n            <tr>\r\n              <th>{DATA.labelFileName}</th>\r\n              <th>{DATA.labelFileType}</th>\r\n              <th>{DATA.labelLastModified}</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>{selectedFile.name}</td>\r\n              <td>{selectedFile.type}</td>\r\n              <td>{selectedFile.lastModifiedDate.toDateString()}</td>\r\n            </tr>\r\n          </tbody>\r\n        </Table>\r\n      );\r\n    } else {\r\n      return <Alert variant={\"primary\"}>{message}</Alert>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h4 className=\"text-center mar-top-bot-2rem\">{DATA.msgUpload}</h4>\r\n      <hr />\r\n      <Form>\r\n        <Row>\r\n          <Col>\r\n            <Form.File id=\"upload\" name=\"upload\" onChange={onFileChange} />\r\n          </Col>\r\n          <Col>\r\n            <Button variant=\"primary\" type=\"button\" onClick={onFileUpload}>\r\n              {DATA.btnUpload}\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n      <br />\r\n      {fileData()}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Upload;\r\n"],"sourceRoot":""}